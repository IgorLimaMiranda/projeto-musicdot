/* Dentro do arquivo estilos.css colocamos apenas o conteúdo do CSS: */

body {
    /* deixando o fundo amarelo ouro */
    background-color: gold;

        /* Da mesma maneira que alteramos cores, podemos alterar o texto. Podemos definir fontes com o uso
        da propriedade font-family . */

        /* A propriedade font-family pode receber seu valor com ou sem aspas dependendo da sua
        composição, por exemplo, quando uma fonte tem o nome separado por espaço.
        Por padrão, os navegadores mais conhecidos exibem texto em um tipo que conhecemos como
        "serif". As fontes mais conhecidas (e comumente utilizadas como padrão) são "Times" e "Times New
        Roman", dependendo do sistema operacional. Elas são chamadas de fontes serifadas pelos pequenos
        ornamentos em suas terminações.

        Podemos alterar a família de fontes que queremos utilizar em nosso documento para a família "sansserif"
        (sem serifas), que contém, por exemplo, as fontes "Arial" e "Helvetica". Podemos também
        declarar que queremos utilizar uma família de fontes "monospace" como, por exemplo, a fonte
        "Courier".

        Obs: Fontes monospace podem ser tanto com serifa ou sem serifa. Monospace quer dizer apenas
        que todas as letras possuem o mesmo tamanho */

        /* Em nosso projeto, as fontes não têm ornamentos, vamos declarar essa propriedade para todo o
           documento por meio do seu elemento body. 
        
        O navegador verificará se a fonte "Helvetica" está disponível e a utilizará para exibir os
        textos de todos os elementos do nosso documento que, por cascata, herdarão essa propriedade do
        elemento body .

        Caso a fonte "Helvetica" não esteja disponível, o navegador verificará a disponibilidade da próxima
        fonte declarada, no nosso exemplo a "Lucida Grande". 
        
        Caso o navegador não encontre também essa
        fonte, ele solicita qualquer fonte que pertença à família "sans-serif", declarada logo a seguir, e a utiliza
        para exibir o texto, não importa qual seja ela. */

        font-family: "Helvetica", "Lucida Grande", sans-serif;

        /* Temos outras propriedades para manipular a fonte, como a propriedade font-style , que define o
        estilo da fonte que pode ser: normal (normal na vertical), italic (inclinada) e oblique (oblíqua). */

        /* As propriedades do CSS para definirmos as bordas de um elemento nos apresentam uma série de
        opções. Podemos, para cada borda de um elemento, determinar sua cor, seu estilo de exibição e sua
        largura. Por exemplo: */
        /* border-color: red;
        border-style: solid;
        border-width: 1px; */

        /* A propriedade border tem uma forma resumida para escrever os mesmos estilos que adicionamos
        acima, mas de uma maneira mais simples: 

        Para que o efeito da cor sobre a borda surta efeito, é necessário que a propriedade border-style
        tenha qualquer valor diferente do padrão none . */
        border: 1px solid red;
    }

/*seletor*/
p {
    /* propriedade: valor; */
    color: blue;
    background-color: yellow;

    /* font-family: monospace; */

    /* Vamos mudar o alinhamento do texto com a propriedade text-align . */

    /* O exemplo determina que todos os parágrafos da nossa página tenham o texto alinhado para a
    direita. Também é possível determinar que um elemento tenha seu conteúdo alinhado ao centro ao
    definirmos o valor center para a propriedade text-align , ou então definir que o texto deve ocupar
    toda a largura do elemento aumentando o espaçamento entre as palavras com o valor justify . Por
    padrão o texto é alinhado à esquerda, com o valor left , porém é importante lembrar que essa
    propriedade propaga-se em cascata. */
    text-align: right;

    /* É possível configurar também uma série de espaçamentos de texto com o CSS: */
    line-height: 3px; /* tamanho da altura de cada linha */
    letter-spacing: 3px; /* tamanho do espaço entre cada letra */
    word-spacing: 5px; /* tamanho do espaço entre cada palavra */
    text-indent: 30px; /* tamanho da margem da primeira linha do texto */
}

h1 {
    /* font-family: serif; */

    /* background-image: url(sobre-background.jpg); */

    background-image: url(https://i.imgur.com/uAhjMNd.jpg);

    /* Podemos também falar em qual dos lados do nosso elemento queremos a borda usando a
    subpropriedade que indica lado: */
    border-top: 1px solid red; /* borda vermelha em cima */
    border-right: 1px solid red; /* borda vermelha à direita */
    border-bottom: 1px solid red; /* borda vermelha embaixo */
    border-left: 1px solid red; /* borda vermelha à esquerda */
    
    /* Usando o nome da cor: */
    color: red;
}
    
h2 {
/* font-family: sans-serif; */
   
    /* Usando o nome da cor: */
    background-color: yellow;
}

h3 {
       /* A W3C obriga que todos os navegadores tenham pelo menos
       140 nomes de cores padronizados, mas existem mais de 16 milhões de cores na web e seria
       extremamente complicado nomear cada uma delas. */
       
    /* Usando RGB (um vermelho, um verde e um azul) - a combinação dessas 3 cores formam todas as outras 16 milhões de
       cores que vemos nos monitores. Podemos escolher a intensidade de cada um desses três leds básicos,
       numa escala de 0 a 255.
    Essa sintaxe funciona nos browsers mais modernos e até alguns browsers super antigos mas não é a
    mais comum na prática, por questões de compatibilidade. O mais comum é a notação hexadecimal.
    Essa sintaxe tem suporte universal nos navegadores e é mais curta de escrever, apesar de ser mais
    enigmática. 
    Um amarelo forte, por exemplo, tem 255 de Red, 255 de Green e 0 de Blue (255, 255, 0). Se quiser
    um laranja, basta diminuir um pouco o verde (255, 200, 0). E assim por diante. */    
    color: rgb(255, 200, 0);

    /* Usando a notação hexadecimal */
    /* No fundo, porém, as duas formas são baseadas no sistema RGB. Na notação hexadecimal (que
       começa com #), temos 6 caracteres, os primeiros 2 indicam o canal Red, os dois seguintes, o Green, e os
       dois últimos, Blue; ou seja, RGB. E usamos a matemática pra escrever menos, trocando a base numérica
       de decimal para hexadecimal.
       Na base hexadecimal, os algarismos vão de zero a quinze (ao invés do zero a nove da base decimal
       comum). Para representar os algarismos de dez a quinze, usamos letras de A a F. Nessa sintaxe, portanto,
       podemos utilizar números de 0-9 e letras de A-F.
       Há uma conta por trás dessas conversões, mas seu editor de imagens deve ser capaz de fornecer
       ambos os valores para você sem problemas. 
       Um valor 255 vira FF na notação hexadecimal. A cor
       #f2eded, por exemplo, é equivalente a rgb(242, 237, 237), um cinza claro. */
    background-color: #f2eded;
    /* Vale aqui uma dica quanto ao uso de cores hexadecimais, toda vez que os caracteres presentes na
       composição da base se repetirem, estes podem ser simplificados. Então um número em hexadecimal
       3366ff, pode ser simplificado para 36f.
       Obs: os 3 pares de números devem ser iguais entre si, ou seja, se tivermos um hexadecimal #33aabc
       não podemos simplificar nada do código. */
}